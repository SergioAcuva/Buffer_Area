# -*- coding: utf-8 -*-
"""
/***************************************************************************
 area_bufferDialog
                                 A QGIS plugin
 Los usuarios de QGIS frecuentemente necesitan crear buffers en torno a puntos temporales para sus análisis geoespaciales, sin embargo, la herramienta de geoproceso "buffer", que por defecto posee QGIS, puede ser compleja y requiere varios pasos y parámetros que pueden ser innecesarios para tareas simples. Se necesita un plugin que simplifique este proceso, permitiendo a los usuarios crear un punto temporal y definir el tamaño del buffer de manera rápida e intuitiva, sin tener que manejar todos los parámetros de la herramienta estándar de QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2024-06-07
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Nicolas Chaparro, Sergio Acuña
        email                : sscunav@udistrital.edu.co
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt import QtGui, QtWidgets
from qgis.core import (QgsProject, QgsVectorLayer, QgsFeature, 
                       QgsGeometry, QgsSymbol, QgsSimpleMarkerSymbolLayer,
                       QgsWkbTypes, QgsCoordinateTransform, QgsCoordinateReferenceSystem, QgsUnitTypes)
from qgis.gui import QgsMapCanvas, QgsMapToolEmitPoint
from .ui_generador_buffer_dialog_base import Ui_GeneradorBufferDialogBase
# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer

class area_bufferDialog(QtWidgets.QDialog, Ui_GeneradorBufferDialogBase):
    def __init__(self, iface, parent=None):
        super(area_bufferDialog, self).__init__(parent)
        self.setupUi(self)
        self.iface = iface
        self.canvas = iface.mapCanvas()
        self.point_tool = QgsMapToolEmitPoint(self.canvas)
        self.point_tool.canvasClicked.connect(self.add_point_buffer)

        self.pushButton.clicked.connect(self.start_select_point_buffer)
        self.pushButton_2.clicked.connect(self.create_buffer)  # Conectar el botón buffer
        self.pushButton_5.clicked.connect(self.clear_points)  # Conectar el botón borrar

        self.selected_point = None  # Para almacenar el punto seleccionado

    def start_select_point_buffer(self):
        self.point_tool.canvasClicked.disconnect()
        self.point_tool.canvasClicked.connect(self.add_point_buffer)
        self.canvas.setMapTool(self.point_tool)

    def add_point_buffer(self, point):
        self.selected_point = point  # Almacenar el punto seleccionado

        # Buscar y eliminar la capa de inicio si existe
        self.remove_layer_by_name("Inicio")

        start_layer = QgsVectorLayer("Point?crs=EPSG:4326", "Inicio", "memory")
        pr = start_layer.dataProvider()
        start_layer.updateFields()
        QgsProject.instance().addMapLayer(start_layer)

        symbol = QgsSymbol.defaultSymbol(start_layer.geometryType())
        symbol_layer = symbol.symbolLayer(0)
        if isinstance(symbol_layer, QgsSimpleMarkerSymbolLayer):
            symbol_layer.setSize(5)
            start_layer.renderer().setSymbol(symbol)

        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(point))
        pr.addFeature(feature)
        start_layer.updateExtents()
        self.canvas.refresh()

    def create_buffer(self):
        if self.selected_point is None:
            QtWidgets.QMessageBox.warning(self, "Advertencia", "Por favor, seleccione un punto primero.")
            return
    
        # Obtener la distancia del buffer desde el lineEdit
        distance_text = self.lineEdit.text()
        try:
            distance_meters = float(distance_text)  # Convertir el texto a un número flotante
        except ValueError:
            QtWidgets.QMessageBox.warning(self, "Error", "Por favor, ingrese un número válido para la distancia del buffer.")
            return

        # Mostrar la distancia del buffer en metros
        QtWidgets.QMessageBox.information(self, "Distancia del buffer", f"Distancia del buffer: {distance_meters} metros")

        # Convertir la distancia a grados basada en la latitud del punto seleccionado
        lat = self.selected_point.y()
        distance_degrees = meters_to_degrees(distance_meters, lat)

        buffer_geom = QgsGeometry.fromPointXY(self.selected_point).buffer(distance_degrees, 10)

        # Buscar y eliminar la capa de buffer si existe
        self.remove_layer_by_name("Buffer")

        buffer_layer = QgsVectorLayer("Polygon?crs=EPSG:4326", "Buffer", "memory")
        pr = buffer_layer.dataProvider()
        buffer_layer.updateFields()
        QgsProject.instance().addMapLayer(buffer_layer)

        buffer_feature = QgsFeature()
        buffer_feature.setGeometry(buffer_geom)
        pr.addFeature(buffer_feature)
        buffer_layer.updateExtents()
        self.canvas.refresh()

    def clear_points(self):
        self.remove_layer_by_name("Inicio")
        self.remove_layer_by_name("Buffer")
        self.selected_point = None  # Limpiar el punto seleccionado

    def remove_layer_by_name(self, layer_name):
        layers = QgsProject.instance().mapLayersByName(layer_name)
        for layer in layers:
            QgsProject.instance().removeMapLayer(layer)

def meters_to_degrees(distance_meters, latitude):
    earth_radius = 6378137  # Radio de la tierra en metros (aproximado)
    degrees_per_meter = 1 / ((2 * 3.141592653589793 * earth_radius * abs(latitude)) / 360)  # Aproximación de grados por metro en la latitud dada
    distance_degrees = distance_meters * degrees_per_meter
    return distance_degrees
